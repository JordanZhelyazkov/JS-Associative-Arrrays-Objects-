function solve(input){
let pieces = {};
let num = +input.shift();
//`.take pieces;
for(let i = 0; i < num; i++){
    let piece = input.shift().split('|');
    let pieceName = piece[0];
    let composer = piece[1];
    let key = piece[2];
    pieces[pieceName] = {composer, key};
}
2// execute commands;
let line = input.shift();
while(line != 'Stop'){
    let[command, piece, composer, key] = line.split('|');
    switch (command){
        case 'Add':
            if(!pieces.hasOwnProperty(piece)){
                pieces[piece] = {composer: composer, key: key};
                console.log(`${piece} by ${composer} in ${key} added to the collection!`);
            } else {
                console.log(`${piece} is already in the collection!`);
            }
            break;
        case 'Remove':
            if(!pieces.hasOwnProperty(piece)){
                console.log(`Invalid operation! ${piece} does not exist in the collection.`);
            } else {
            
                console.log(`Successfully removed ${piece}!`);
                delete pieces[piece];
            }
            break;
        case 'ChangeKey':
            if(!pieces.hasOwnProperty(piece)){
               console.log(`Invalid operation! ${piece} does not exist in the collection.`);
            } else {
                let newKey = composer;
                pieces[piece].key = newKey
                //delete pieces[piece].key
                console.log(`Changed the key of ${piece} to ${newKey}!`);
            }
            break;
    }

    line = input.shift();
}
let piecesEntries = Object.entries(pieces)
let sortedENtries = piecesEntries.sort((a, b) => a[0].localeCompare(b[0]) || a[1].composer.localeCompare(b[1].composer))


for (const kvp of sortedENtries) {
    console.log(`${kvp[0]} -> Composer: ${kvp[1].composer}, Key: ${kvp[1].key}`);
    
}
}
